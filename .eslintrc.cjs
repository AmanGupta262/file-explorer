module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "prettier",
  ],
  ignorePatterns: ["dist", ".eslintrc.cjs", "vite-config.ts"],
  parser: "@typescript-eslint/parser",
  plugins: ["react-refresh", "react-hooks", "@typescript-eslint", "prettier", "import"],
  settings: {
    react: {
      version: "detect",
    },
    "import/resolver": {
      node: {
        paths: ["src"],
        extensions: [".js", ".jsx", ".ts", ".tsx", ".json", ".d.ts"],
      },
      typescript: {
        alwaysTryTypes: true,
      },
    },
  },
  rules: {
    "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
    "react/react-in-jsx-scope": "off",
    "react-hooks/exhaustive-deps": "off",
    "react/self-closing-comp": "error",
    "react/jsx-fragments": "error",
    "react/no-array-index-key": "warn",
    "react/jsx-no-useless-fragment": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "react/jsx-key": [
      "error",
      {
        checkFragmentShorthand: true,
        checkKeyMustBeforeSpread: true,
        warnOnDuplicates: true,
      },
    ],
    "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
    "react/no-multi-comp": ["error", { ignoreStateless: true }],
    "import/no-default-export": "warn",
    "brace-style": ["error", "1tbs"],
    "no-tabs": 0,
    semi: "error",
    "global-require": 0,
    "no-param-reassign": 0,
    curly: ["error", "all"],
    "prefer-const": "error",
    "no-multiple-empty-lines": ["error", { max: 1, maxEOF: 1 }],
    "padding-line-between-statements": [
      "error",
      { blankLine: "always", prev: "*", next: "return" },
      { blankLine: "always", prev: ["const", "let", "var"], next: "*" },
      {
        blankLine: "any",
        prev: ["const", "let", "var"],
        next: ["const", "let", "var"],
      },
      { blankLine: "always", prev: "block-like", next: "block-like" },
    ],
    "max-len": [
      "error",
      {
        code: 100,
        tabWidth: 2,
        comments: 150,
        ignoreComments: false,
        ignoreTrailingComments: true,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      },
    ],
    "no-underscore-dangle": "off",
    "no-unused-expressions": "off",
    "import/prefer-default-export": "off",
    "react/prop-types": "off",
    "react/function-component-definition": [
      "warn",
      {
        namedComponents: "arrow-function",
        unnamedComponents: "arrow-function",
      },
    ],
    "no-shadow": "off",
    quotes: ["warn", "single"],
    "import/order": [
      "error",
      {
        pathGroups: [
          {
            pattern: "react",
            group: "builtin",
            position: "before",
          },
        ],
        groups: ["builtin", "external", "internal", "object", "type", "parent", "sibling", "index"],
        alphabetize: {
          order: "asc",
          caseInsensitive: true,
        },
        "newlines-between": "always",
        pathGroupsExcludedImportTypes: ["builtin"],
      },
    ],
    "react/jsx-no-constructed-context-values": "warn",
    "import/no-deprecated": 1,
    "import/no-commonjs": ["error"],
    "import/newline-after-import": [1],
    "import/no-unassigned-import": [
      "error",
      {
        allow: ["dotenv-safe/config", "dotenv/config", "newrelic", "**/*.scss", "**/*.css"],
      },
    ],
    "import/first": 1,
    "import/no-duplicates": ["error"],
    "no-use-before-define": "warn",
    "react/jsx-props-no-spreading": "off",
    "no-nested-ternary": "off",
    " jsx-a11y/label-has-associated-control": "off",
    "jsx-a11y/label-has-associated-control": "off",
    eqeqeq: ["error", "always"],
    "no-lonely-if": ["error"],
    yoda: ["error", "never"],
    "spaced-comment": ["error", "always", { markers: ["/"] }],
    "no-unused-vars": "off",
    "no-console": [
      "warn",
      {
        allow: ["debug", "warn", "error", "info"],
      },
    ],
    "@typescript-eslint/ban-ts-comment": ["error", { "ts-ignore": "allow-with-description" }],
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        argsIgnorePattern: "^_",
        varsIgnorePattern: "^_",
        ignoreRestSiblings: true,
      },
    ],
    "@typescript-eslint/explicit-module-boundary-types": 0,
    "@typescript-eslint/explicit-function-return-type": 0,
    "@typescript-eslint/interface-name-prefix": 0,
    "@typescript-eslint/no-loss-of-precision": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "default",
        format: ["camelCase", "UPPER_CASE", "PascalCase"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: ["variable"],
        modifiers: ["const"],
        format: ["camelCase", "UPPER_CASE", "PascalCase"],
      },
      {
        selector: ["typeLike"],
        format: ["PascalCase"],
      },
      {
        selector: ["objectLiteralProperty"],
        format: ["camelCase"],
      },
      {
        selector: ["typeAlias"],
        prefix: ["T"],
        format: ["PascalCase"],
      },
      {
        selector: ["interface"],
        prefix: ["I"],
        format: ["PascalCase"],
      },
      {
        selector: ["enumMember"],
        format: null,
      },
      {
        selector: "variable",
        modifiers: ["destructured"],
        format: null,
      },
    ],

    "prettier/prettier": [
      "error",
      {
        useTabs: false,
        printWidth: 100,
        tabWidth: 2,
        singleQuote: true,
        semi: true,
        trailingComma: "all",
        bracketSpacing: true,
        rcVerbose: true,
        arrowParens: "always",
        embeddedLanguageFormatting: "auto",
        endOfLine: "lf",
        htmlWhitespaceSensitivity: "css",
        jsxSingleQuote: true,
        proseWrap: "preserve",
        quoteProps: "as-needed",
      },
    ],
  },
};
